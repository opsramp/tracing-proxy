// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v4.25.2
// source: proto/proxyspan.proto

package proxypb

import (
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StatusRequest) Reset() {
	*x = StatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proxyspan_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusRequest) ProtoMessage() {}

func (x *StatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxyspan_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusRequest.ProtoReflect.Descriptor instead.
func (*StatusRequest) Descriptor() ([]byte, []int) {
	return file_proto_proxyspan_proto_rawDescGZIP(), []int{0}
}

type StatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PeerActive bool `protobuf:"varint,1,opt,name=peerActive,proto3" json:"peerActive,omitempty"`
}

func (x *StatusResponse) Reset() {
	*x = StatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proxyspan_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StatusResponse) ProtoMessage() {}

func (x *StatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxyspan_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StatusResponse.ProtoReflect.Descriptor instead.
func (*StatusResponse) Descriptor() ([]byte, []int) {
	return file_proto_proxyspan_proto_rawDescGZIP(), []int{1}
}

func (x *StatusResponse) GetPeerActive() bool {
	if x != nil {
		return x.PeerActive
	}
	return false
}

type ExportTraceProxyServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items    []*ProxySpan `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	TenantId string       `protobuf:"bytes,2,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *ExportTraceProxyServiceRequest) Reset() {
	*x = ExportTraceProxyServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proxyspan_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportTraceProxyServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportTraceProxyServiceRequest) ProtoMessage() {}

func (x *ExportTraceProxyServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxyspan_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportTraceProxyServiceRequest.ProtoReflect.Descriptor instead.
func (*ExportTraceProxyServiceRequest) Descriptor() ([]byte, []int) {
	return file_proto_proxyspan_proto_rawDescGZIP(), []int{2}
}

func (x *ExportTraceProxyServiceRequest) GetItems() []*ProxySpan {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ExportTraceProxyServiceRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type ExportLogTraceProxyServiceRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items    []*ProxyLogSpan `protobuf:"bytes,1,rep,name=items,proto3" json:"items,omitempty"`
	TenantId string          `protobuf:"bytes,2,opt,name=tenantId,proto3" json:"tenantId,omitempty"`
}

func (x *ExportLogTraceProxyServiceRequest) Reset() {
	*x = ExportLogTraceProxyServiceRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proxyspan_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportLogTraceProxyServiceRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportLogTraceProxyServiceRequest) ProtoMessage() {}

func (x *ExportLogTraceProxyServiceRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxyspan_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportLogTraceProxyServiceRequest.ProtoReflect.Descriptor instead.
func (*ExportLogTraceProxyServiceRequest) Descriptor() ([]byte, []int) {
	return file_proto_proxyspan_proto_rawDescGZIP(), []int{3}
}

func (x *ExportLogTraceProxyServiceRequest) GetItems() []*ProxyLogSpan {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ExportLogTraceProxyServiceRequest) GetTenantId() string {
	if x != nil {
		return x.TenantId
	}
	return ""
}

type ProxySpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      *Data  `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Timestamp string `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ProxySpan) Reset() {
	*x = ProxySpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proxyspan_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxySpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxySpan) ProtoMessage() {}

func (x *ProxySpan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxyspan_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxySpan.ProtoReflect.Descriptor instead.
func (*ProxySpan) Descriptor() ([]byte, []int) {
	return file_proto_proxyspan_proto_rawDescGZIP(), []int{4}
}

func (x *ProxySpan) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ProxySpan) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type ProxyLogSpan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Data      *LogTraceData `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	Timestamp string        `protobuf:"bytes,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *ProxyLogSpan) Reset() {
	*x = ProxyLogSpan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proxyspan_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProxyLogSpan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProxyLogSpan) ProtoMessage() {}

func (x *ProxyLogSpan) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxyspan_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProxyLogSpan.ProtoReflect.Descriptor instead.
func (*ProxyLogSpan) Descriptor() ([]byte, []int) {
	return file_proto_proxyspan_proto_rawDescGZIP(), []int{5}
}

func (x *ProxyLogSpan) GetData() *LogTraceData {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ProxyLogSpan) GetTimestamp() string {
	if x != nil {
		return x.Timestamp
	}
	return ""
}

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DurationMs       float64 `protobuf:"fixed64,1,opt,name=durationMs,proto3" json:"durationMs,omitempty"`
	Type             string  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	SpanName         string  `protobuf:"bytes,5,opt,name=spanName,proto3" json:"spanName,omitempty"`
	ParentName       string  `protobuf:"bytes,6,opt,name=parentName,proto3" json:"parentName,omitempty"`
	SpanKind         string  `protobuf:"bytes,8,opt,name=spanKind,proto3" json:"spanKind,omitempty"`
	SpanNumEvents    int64   `protobuf:"varint,9,opt,name=spanNumEvents,proto3" json:"spanNumEvents,omitempty"`
	SpanNumLinks     int64   `protobuf:"varint,10,opt,name=spanNumLinks,proto3" json:"spanNumLinks,omitempty"`
	StatusCode       int64   `protobuf:"varint,11,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	FromProxy        bool    `protobuf:"varint,12,opt,name=fromProxy,proto3" json:"fromProxy,omitempty"`
	TraceParentID    string  `protobuf:"bytes,13,opt,name=traceParentID,proto3" json:"traceParentID,omitempty"`
	TraceSpanID      string  `protobuf:"bytes,14,opt,name=traceSpanID,proto3" json:"traceSpanID,omitempty"`
	TraceTraceID     string  `protobuf:"bytes,15,opt,name=traceTraceID,proto3" json:"traceTraceID,omitempty"`
	TraceLinkSpanID  string  `protobuf:"bytes,16,opt,name=traceLinkSpanID,proto3" json:"traceLinkSpanID,omitempty"`
	TraceLinkTraceID string  `protobuf:"bytes,17,opt,name=traceLinkTraceID,proto3" json:"traceLinkTraceID,omitempty"`
	Error            bool    `protobuf:"varint,18,opt,name=error,proto3" json:"error,omitempty"`
	StatusMessage    string  `protobuf:"bytes,19,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	Time             int64   `protobuf:"varint,20,opt,name=time,proto3" json:"time,omitempty"`
	MetaType         string  `protobuf:"bytes,21,opt,name=metaType,proto3" json:"metaType,omitempty"`
	// The OpenTelemetry API specification further restricts the allowed value types:
	// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/common.md#attributes
	// Attribute keys MUST be unique (it is not allowed to have more than one
	// attribute with the same key).
	ResourceAttributes []*KeyValue `protobuf:"bytes,22,rep,name=resourceAttributes,proto3" json:"resourceAttributes,omitempty"`
	SpanAttributes     []*KeyValue `protobuf:"bytes,23,rep,name=spanAttributes,proto3" json:"spanAttributes,omitempty"`
	EventAttributes    []*KeyValue `protobuf:"bytes,24,rep,name=eventAttributes,proto3" json:"eventAttributes,omitempty"`
	StartTime          int64       `protobuf:"varint,25,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime            int64       `protobuf:"varint,26,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proxyspan_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxyspan_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_proto_proxyspan_proto_rawDescGZIP(), []int{6}
}

func (x *Data) GetDurationMs() float64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *Data) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Data) GetSpanName() string {
	if x != nil {
		return x.SpanName
	}
	return ""
}

func (x *Data) GetParentName() string {
	if x != nil {
		return x.ParentName
	}
	return ""
}

func (x *Data) GetSpanKind() string {
	if x != nil {
		return x.SpanKind
	}
	return ""
}

func (x *Data) GetSpanNumEvents() int64 {
	if x != nil {
		return x.SpanNumEvents
	}
	return 0
}

func (x *Data) GetSpanNumLinks() int64 {
	if x != nil {
		return x.SpanNumLinks
	}
	return 0
}

func (x *Data) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *Data) GetFromProxy() bool {
	if x != nil {
		return x.FromProxy
	}
	return false
}

func (x *Data) GetTraceParentID() string {
	if x != nil {
		return x.TraceParentID
	}
	return ""
}

func (x *Data) GetTraceSpanID() string {
	if x != nil {
		return x.TraceSpanID
	}
	return ""
}

func (x *Data) GetTraceTraceID() string {
	if x != nil {
		return x.TraceTraceID
	}
	return ""
}

func (x *Data) GetTraceLinkSpanID() string {
	if x != nil {
		return x.TraceLinkSpanID
	}
	return ""
}

func (x *Data) GetTraceLinkTraceID() string {
	if x != nil {
		return x.TraceLinkTraceID
	}
	return ""
}

func (x *Data) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *Data) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *Data) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *Data) GetMetaType() string {
	if x != nil {
		return x.MetaType
	}
	return ""
}

func (x *Data) GetResourceAttributes() []*KeyValue {
	if x != nil {
		return x.ResourceAttributes
	}
	return nil
}

func (x *Data) GetSpanAttributes() []*KeyValue {
	if x != nil {
		return x.SpanAttributes
	}
	return nil
}

func (x *Data) GetEventAttributes() []*KeyValue {
	if x != nil {
		return x.EventAttributes
	}
	return nil
}

func (x *Data) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *Data) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type LogTraceData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DurationMs       float64 `protobuf:"fixed64,1,opt,name=durationMs,proto3" json:"durationMs,omitempty"`
	Type             string  `protobuf:"bytes,4,opt,name=type,proto3" json:"type,omitempty"`
	SpanName         string  `protobuf:"bytes,5,opt,name=spanName,proto3" json:"spanName,omitempty"`
	ParentName       string  `protobuf:"bytes,6,opt,name=parentName,proto3" json:"parentName,omitempty"`
	SpanKind         string  `protobuf:"bytes,8,opt,name=spanKind,proto3" json:"spanKind,omitempty"`
	SpanNumEvents    int64   `protobuf:"varint,9,opt,name=spanNumEvents,proto3" json:"spanNumEvents,omitempty"`
	SpanNumLinks     int64   `protobuf:"varint,10,opt,name=spanNumLinks,proto3" json:"spanNumLinks,omitempty"`
	StatusCode       int64   `protobuf:"varint,11,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	FromProxy        bool    `protobuf:"varint,12,opt,name=fromProxy,proto3" json:"fromProxy,omitempty"`
	TraceParentID    string  `protobuf:"bytes,13,opt,name=traceParentID,proto3" json:"traceParentID,omitempty"`
	TraceSpanID      string  `protobuf:"bytes,14,opt,name=traceSpanID,proto3" json:"traceSpanID,omitempty"`
	TraceTraceID     string  `protobuf:"bytes,15,opt,name=traceTraceID,proto3" json:"traceTraceID,omitempty"`
	TraceLinkSpanID  string  `protobuf:"bytes,16,opt,name=traceLinkSpanID,proto3" json:"traceLinkSpanID,omitempty"`
	TraceLinkTraceID string  `protobuf:"bytes,17,opt,name=traceLinkTraceID,proto3" json:"traceLinkTraceID,omitempty"`
	Error            bool    `protobuf:"varint,18,opt,name=error,proto3" json:"error,omitempty"`
	StatusMessage    string  `protobuf:"bytes,19,opt,name=statusMessage,proto3" json:"statusMessage,omitempty"`
	Time             int64   `protobuf:"varint,20,opt,name=time,proto3" json:"time,omitempty"`
	MetaType         string  `protobuf:"bytes,21,opt,name=metaType,proto3" json:"metaType,omitempty"`
	// The OpenTelemetry API specification further restricts the allowed value types:
	// https://github.com/open-telemetry/opentelemetry-specification/blob/main/specification/common/common.md#attributes
	// Attribute keys MUST be unique (it is not allowed to have more than one
	// attribute with the same key).
	ResourceAttributes []*KeyValue  `protobuf:"bytes,22,rep,name=resourceAttributes,proto3" json:"resourceAttributes,omitempty"`
	SpanAttributes     []*KeyValue  `protobuf:"bytes,23,rep,name=spanAttributes,proto3" json:"spanAttributes,omitempty"`
	EventAttributes    []*KeyValue  `protobuf:"bytes,24,rep,name=eventAttributes,proto3" json:"eventAttributes,omitempty"`
	SpanEvents         []*SpanEvent `protobuf:"bytes,25,rep,name=spanEvents,proto3" json:"spanEvents,omitempty"`
	StartTime          int64        `protobuf:"varint,26,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime            int64        `protobuf:"varint,27,opt,name=endTime,proto3" json:"endTime,omitempty"`
}

func (x *LogTraceData) Reset() {
	*x = LogTraceData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proxyspan_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LogTraceData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LogTraceData) ProtoMessage() {}

func (x *LogTraceData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxyspan_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LogTraceData.ProtoReflect.Descriptor instead.
func (*LogTraceData) Descriptor() ([]byte, []int) {
	return file_proto_proxyspan_proto_rawDescGZIP(), []int{7}
}

func (x *LogTraceData) GetDurationMs() float64 {
	if x != nil {
		return x.DurationMs
	}
	return 0
}

func (x *LogTraceData) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *LogTraceData) GetSpanName() string {
	if x != nil {
		return x.SpanName
	}
	return ""
}

func (x *LogTraceData) GetParentName() string {
	if x != nil {
		return x.ParentName
	}
	return ""
}

func (x *LogTraceData) GetSpanKind() string {
	if x != nil {
		return x.SpanKind
	}
	return ""
}

func (x *LogTraceData) GetSpanNumEvents() int64 {
	if x != nil {
		return x.SpanNumEvents
	}
	return 0
}

func (x *LogTraceData) GetSpanNumLinks() int64 {
	if x != nil {
		return x.SpanNumLinks
	}
	return 0
}

func (x *LogTraceData) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

func (x *LogTraceData) GetFromProxy() bool {
	if x != nil {
		return x.FromProxy
	}
	return false
}

func (x *LogTraceData) GetTraceParentID() string {
	if x != nil {
		return x.TraceParentID
	}
	return ""
}

func (x *LogTraceData) GetTraceSpanID() string {
	if x != nil {
		return x.TraceSpanID
	}
	return ""
}

func (x *LogTraceData) GetTraceTraceID() string {
	if x != nil {
		return x.TraceTraceID
	}
	return ""
}

func (x *LogTraceData) GetTraceLinkSpanID() string {
	if x != nil {
		return x.TraceLinkSpanID
	}
	return ""
}

func (x *LogTraceData) GetTraceLinkTraceID() string {
	if x != nil {
		return x.TraceLinkTraceID
	}
	return ""
}

func (x *LogTraceData) GetError() bool {
	if x != nil {
		return x.Error
	}
	return false
}

func (x *LogTraceData) GetStatusMessage() string {
	if x != nil {
		return x.StatusMessage
	}
	return ""
}

func (x *LogTraceData) GetTime() int64 {
	if x != nil {
		return x.Time
	}
	return 0
}

func (x *LogTraceData) GetMetaType() string {
	if x != nil {
		return x.MetaType
	}
	return ""
}

func (x *LogTraceData) GetResourceAttributes() []*KeyValue {
	if x != nil {
		return x.ResourceAttributes
	}
	return nil
}

func (x *LogTraceData) GetSpanAttributes() []*KeyValue {
	if x != nil {
		return x.SpanAttributes
	}
	return nil
}

func (x *LogTraceData) GetEventAttributes() []*KeyValue {
	if x != nil {
		return x.EventAttributes
	}
	return nil
}

func (x *LogTraceData) GetSpanEvents() []*SpanEvent {
	if x != nil {
		return x.SpanEvents
	}
	return nil
}

func (x *LogTraceData) GetStartTime() int64 {
	if x != nil {
		return x.StartTime
	}
	return 0
}

func (x *LogTraceData) GetEndTime() int64 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

type SpanEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                string      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	TimeStamp           uint64      `protobuf:"varint,2,opt,name=timeStamp,proto3" json:"timeStamp,omitempty"`
	SpanEventAttributes []*KeyValue `protobuf:"bytes,3,rep,name=spanEventAttributes,proto3" json:"spanEventAttributes,omitempty"`
}

func (x *SpanEvent) Reset() {
	*x = SpanEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proxyspan_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SpanEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SpanEvent) ProtoMessage() {}

func (x *SpanEvent) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxyspan_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SpanEvent.ProtoReflect.Descriptor instead.
func (*SpanEvent) Descriptor() ([]byte, []int) {
	return file_proto_proxyspan_proto_rawDescGZIP(), []int{8}
}

func (x *SpanEvent) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SpanEvent) GetTimeStamp() uint64 {
	if x != nil {
		return x.TimeStamp
	}
	return 0
}

func (x *SpanEvent) GetSpanEventAttributes() []*KeyValue {
	if x != nil {
		return x.SpanEventAttributes
	}
	return nil
}

// AnyValue is used to represent any type of attribute value. AnyValue may contain a
// primitive value such as a string or integer or it may contain an arbitrary nested
// object containing arrays, key-value lists and primitives.
type AnyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The value is one of the listed fields. It is valid for all values to be unspecified
	// in which case this AnyValue is considered to be "empty".
	//
	// Types that are assignable to Value:
	//
	//	*AnyValue_StringValue
	//	*AnyValue_BoolValue
	//	*AnyValue_IntValue
	//	*AnyValue_DoubleValue
	//	*AnyValue_ArrayValue
	//	*AnyValue_KvlistValue
	//	*AnyValue_BytesValue
	Value isAnyValue_Value `protobuf_oneof:"value"`
}

func (x *AnyValue) Reset() {
	*x = AnyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proxyspan_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AnyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AnyValue) ProtoMessage() {}

func (x *AnyValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxyspan_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AnyValue.ProtoReflect.Descriptor instead.
func (*AnyValue) Descriptor() ([]byte, []int) {
	return file_proto_proxyspan_proto_rawDescGZIP(), []int{9}
}

func (m *AnyValue) GetValue() isAnyValue_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *AnyValue) GetStringValue() string {
	if x, ok := x.GetValue().(*AnyValue_StringValue); ok {
		return x.StringValue
	}
	return ""
}

func (x *AnyValue) GetBoolValue() bool {
	if x, ok := x.GetValue().(*AnyValue_BoolValue); ok {
		return x.BoolValue
	}
	return false
}

func (x *AnyValue) GetIntValue() int64 {
	if x, ok := x.GetValue().(*AnyValue_IntValue); ok {
		return x.IntValue
	}
	return 0
}

func (x *AnyValue) GetDoubleValue() float64 {
	if x, ok := x.GetValue().(*AnyValue_DoubleValue); ok {
		return x.DoubleValue
	}
	return 0
}

func (x *AnyValue) GetArrayValue() *ArrayValue {
	if x, ok := x.GetValue().(*AnyValue_ArrayValue); ok {
		return x.ArrayValue
	}
	return nil
}

func (x *AnyValue) GetKvlistValue() *KeyValueList {
	if x, ok := x.GetValue().(*AnyValue_KvlistValue); ok {
		return x.KvlistValue
	}
	return nil
}

func (x *AnyValue) GetBytesValue() []byte {
	if x, ok := x.GetValue().(*AnyValue_BytesValue); ok {
		return x.BytesValue
	}
	return nil
}

type isAnyValue_Value interface {
	isAnyValue_Value()
}

type AnyValue_StringValue struct {
	StringValue string `protobuf:"bytes,1,opt,name=string_value,json=stringValue,proto3,oneof"`
}

type AnyValue_BoolValue struct {
	BoolValue bool `protobuf:"varint,2,opt,name=bool_value,json=boolValue,proto3,oneof"`
}

type AnyValue_IntValue struct {
	IntValue int64 `protobuf:"varint,3,opt,name=int_value,json=intValue,proto3,oneof"`
}

type AnyValue_DoubleValue struct {
	DoubleValue float64 `protobuf:"fixed64,4,opt,name=double_value,json=doubleValue,proto3,oneof"`
}

type AnyValue_ArrayValue struct {
	ArrayValue *ArrayValue `protobuf:"bytes,5,opt,name=array_value,json=arrayValue,proto3,oneof"`
}

type AnyValue_KvlistValue struct {
	KvlistValue *KeyValueList `protobuf:"bytes,6,opt,name=kvlist_value,json=kvlistValue,proto3,oneof"`
}

type AnyValue_BytesValue struct {
	BytesValue []byte `protobuf:"bytes,7,opt,name=bytes_value,json=bytesValue,proto3,oneof"`
}

func (*AnyValue_StringValue) isAnyValue_Value() {}

func (*AnyValue_BoolValue) isAnyValue_Value() {}

func (*AnyValue_IntValue) isAnyValue_Value() {}

func (*AnyValue_DoubleValue) isAnyValue_Value() {}

func (*AnyValue_ArrayValue) isAnyValue_Value() {}

func (*AnyValue_KvlistValue) isAnyValue_Value() {}

func (*AnyValue_BytesValue) isAnyValue_Value() {}

// ArrayValue is a list of AnyValue messages. We need ArrayValue as a message
// since oneof in AnyValue does not allow repeated fields.
type ArrayValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Array of values. The array may be empty (contain 0 elements).
	Values []*AnyValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *ArrayValue) Reset() {
	*x = ArrayValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proxyspan_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayValue) ProtoMessage() {}

func (x *ArrayValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxyspan_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayValue.ProtoReflect.Descriptor instead.
func (*ArrayValue) Descriptor() ([]byte, []int) {
	return file_proto_proxyspan_proto_rawDescGZIP(), []int{10}
}

func (x *ArrayValue) GetValues() []*AnyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// KeyValueList is a list of KeyValue messages. We need KeyValueList as a message
// since `oneof` in AnyValue does not allow repeated fields. Everywhere else where we need
// a list of KeyValue messages (e.g. in Span) we use `repeated KeyValue` directly to
// avoid unnecessary extra wrapping (which slows down the protocol). The 2 approaches
// are semantically equivalent.
type KeyValueList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A collection of key/value pairs of key-value pairs. The list may be empty (may
	// contain 0 elements).
	// The keys MUST be unique (it is not allowed to have more than one
	// value with the same key).
	Values []*KeyValue `protobuf:"bytes,1,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *KeyValueList) Reset() {
	*x = KeyValueList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proxyspan_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValueList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValueList) ProtoMessage() {}

func (x *KeyValueList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxyspan_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValueList.ProtoReflect.Descriptor instead.
func (*KeyValueList) Descriptor() ([]byte, []int) {
	return file_proto_proxyspan_proto_rawDescGZIP(), []int{11}
}

func (x *KeyValueList) GetValues() []*KeyValue {
	if x != nil {
		return x.Values
	}
	return nil
}

// KeyValue is a key-value pair that is used to store Span attributes, Link
// attributes, etc.
type KeyValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string    `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *AnyValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *KeyValue) Reset() {
	*x = KeyValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proxyspan_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyValue) ProtoMessage() {}

func (x *KeyValue) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxyspan_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyValue.ProtoReflect.Descriptor instead.
func (*KeyValue) Descriptor() ([]byte, []int) {
	return file_proto_proxyspan_proto_rawDescGZIP(), []int{12}
}

func (x *KeyValue) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *KeyValue) GetValue() *AnyValue {
	if x != nil {
		return x.Value
	}
	return nil
}

// The response message
type ExportTraceProxyServiceResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
	Status  string `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ExportTraceProxyServiceResponse) Reset() {
	*x = ExportTraceProxyServiceResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_proxyspan_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExportTraceProxyServiceResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExportTraceProxyServiceResponse) ProtoMessage() {}

func (x *ExportTraceProxyServiceResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_proxyspan_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExportTraceProxyServiceResponse.ProtoReflect.Descriptor instead.
func (*ExportTraceProxyServiceResponse) Descriptor() ([]byte, []int) {
	return file_proto_proxyspan_proto_rawDescGZIP(), []int{13}
}

func (x *ExportTraceProxyServiceResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *ExportTraceProxyServiceResponse) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

var File_proto_proxyspan_proto protoreflect.FileDescriptor

var file_proto_proxyspan_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x73, 0x70, 0x61,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0f, 0x0a, 0x0d,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x30, 0x0a,
	0x0e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x65, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22,
	0x64, 0x0a, 0x1e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x26, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70,
	0x61, 0x6e, 0x52, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x49, 0x64, 0x22, 0x6a, 0x0a, 0x21, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c,
	0x6f, 0x67, 0x54, 0x72, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4c, 0x6f, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0x4a, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x1f,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x22, 0x55, 0x0a,
	0x0c, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x4c, 0x6f, 0x67, 0x53, 0x70, 0x61, 0x6e, 0x12, 0x27, 0x0a,
	0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61,
	0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x22, 0xb5, 0x06, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x61,
	0x6e, 0x4e, 0x75, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x73, 0x70, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x53, 0x70, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x44,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3f, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x0e, 0x73, 0x70, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x70, 0x61, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xef, 0x06, 0x0a,
	0x0c, 0x4c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x63, 0x65, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a,
	0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0a, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x73, 0x12, 0x12, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x70, 0x61, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x73, 0x70, 0x61, 0x6e, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x70, 0x61,
	0x6e, 0x4e, 0x75, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0d, 0x73, 0x70, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x70, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x73, 0x70, 0x61, 0x6e, 0x4e, 0x75, 0x6d, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x6f, 0x64,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x12, 0x24, 0x0a, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x50, 0x61, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x50,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x53, 0x70, 0x61, 0x6e, 0x49, 0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x72,
	0x61, 0x63, 0x65, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x72, 0x61,
	0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0c, 0x74, 0x72, 0x61, 0x63, 0x65, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a,
	0x0f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x44,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e,
	0x6b, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x44, 0x12, 0x2a, 0x0a, 0x10, 0x74, 0x72, 0x61, 0x63, 0x65,
	0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x63, 0x65, 0x49, 0x44, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x10, 0x74, 0x72, 0x61, 0x63, 0x65, 0x4c, 0x69, 0x6e, 0x6b, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x12, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x03, 0x52, 0x04, 0x74,
	0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x3f, 0x0a, 0x12, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x16, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x65,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x0e, 0x73, 0x70, 0x61, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74,
	0x65, 0x73, 0x18, 0x17, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x73, 0x70, 0x61, 0x6e, 0x41,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x12, 0x39, 0x0a, 0x0f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x18, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x12, 0x30, 0x0a, 0x0a, 0x73, 0x70, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x19, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x73, 0x70, 0x61, 0x6e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x80,
	0x01, 0x0a, 0x09, 0x53, 0x70, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x41,
	0x0a, 0x13, 0x73, 0x70, 0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x73, 0x70,
	0x61, 0x6e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0xb0, 0x02, 0x0a, 0x08, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23,
	0x0a, 0x0c, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x0a, 0x62, 0x6f, 0x6f, 0x6c, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x09, 0x62, 0x6f, 0x6f, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x1d, 0x0a, 0x09, 0x69, 0x6e, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x48, 0x00, 0x52, 0x08, 0x69, 0x6e, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0c, 0x64, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x48, 0x00, 0x52, 0x0b, 0x64, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x48, 0x00, 0x52, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x38,
	0x0a, 0x0c, 0x6b, 0x76, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6b, 0x76, 0x6c,
	0x69, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x21, 0x0a, 0x0b, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x0a, 0x62, 0x79, 0x74, 0x65, 0x73, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x35, 0x0a, 0x0a, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x27, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x22, 0x37, 0x0a, 0x0c, 0x4b,
	0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x27, 0x0a, 0x06, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x22, 0x43, 0x0a, 0x08, 0x4b, 0x65, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x25, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x53, 0x0a, 0x1f, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x92,
	0x03, 0x0a, 0x11, 0x54, 0x72, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x9b, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x25, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x54,
	0x72, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x38, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x32,
	0x3a, 0x01, 0x2a, 0x22, 0x2d, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2d, 0x70, 0x72, 0x6f, 0x78,
	0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x37, 0x2f, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x73,
	0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f, 0x74, 0x72, 0x61, 0x63,
	0x65, 0x73, 0x12, 0xa5, 0x01, 0x0a, 0x13, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x67,
	0x54, 0x72, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x28, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x4c, 0x6f, 0x67, 0x54, 0x72, 0x61, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x45, 0x78, 0x70,
	0x6f, 0x72, 0x74, 0x54, 0x72, 0x61, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x36, 0x3a, 0x01, 0x2a, 0x22, 0x31, 0x2f, 0x74, 0x72, 0x61, 0x63, 0x65, 0x2d,
	0x70, 0x72, 0x6f, 0x78, 0x79, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x37, 0x2f, 0x74, 0x65, 0x6e,
	0x61, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x74, 0x65, 0x6e, 0x61, 0x6e, 0x74, 0x49, 0x64, 0x7d, 0x2f,
	0x6c, 0x6f, 0x67, 0x2d, 0x74, 0x72, 0x61, 0x63, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x06, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x15, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x00, 0x42, 0x0b, 0x5a, 0x09, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x70, 0x62,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_proto_proxyspan_proto_rawDescOnce sync.Once
	file_proto_proxyspan_proto_rawDescData = file_proto_proxyspan_proto_rawDesc
)

func file_proto_proxyspan_proto_rawDescGZIP() []byte {
	file_proto_proxyspan_proto_rawDescOnce.Do(func() {
		file_proto_proxyspan_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_proxyspan_proto_rawDescData)
	})
	return file_proto_proxyspan_proto_rawDescData
}

var file_proto_proxyspan_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_proto_proxyspan_proto_goTypes = []interface{}{
	(*StatusRequest)(nil),                     // 0: proto.StatusRequest
	(*StatusResponse)(nil),                    // 1: proto.StatusResponse
	(*ExportTraceProxyServiceRequest)(nil),    // 2: proto.ExportTraceProxyServiceRequest
	(*ExportLogTraceProxyServiceRequest)(nil), // 3: proto.ExportLogTraceProxyServiceRequest
	(*ProxySpan)(nil),                         // 4: proto.ProxySpan
	(*ProxyLogSpan)(nil),                      // 5: proto.ProxyLogSpan
	(*Data)(nil),                              // 6: proto.Data
	(*LogTraceData)(nil),                      // 7: proto.LogTraceData
	(*SpanEvent)(nil),                         // 8: proto.SpanEvent
	(*AnyValue)(nil),                          // 9: proto.AnyValue
	(*ArrayValue)(nil),                        // 10: proto.ArrayValue
	(*KeyValueList)(nil),                      // 11: proto.KeyValueList
	(*KeyValue)(nil),                          // 12: proto.KeyValue
	(*ExportTraceProxyServiceResponse)(nil),   // 13: proto.ExportTraceProxyServiceResponse
}
var file_proto_proxyspan_proto_depIdxs = []int32{
	4,  // 0: proto.ExportTraceProxyServiceRequest.items:type_name -> proto.ProxySpan
	5,  // 1: proto.ExportLogTraceProxyServiceRequest.items:type_name -> proto.ProxyLogSpan
	6,  // 2: proto.ProxySpan.data:type_name -> proto.Data
	7,  // 3: proto.ProxyLogSpan.data:type_name -> proto.LogTraceData
	12, // 4: proto.Data.resourceAttributes:type_name -> proto.KeyValue
	12, // 5: proto.Data.spanAttributes:type_name -> proto.KeyValue
	12, // 6: proto.Data.eventAttributes:type_name -> proto.KeyValue
	12, // 7: proto.LogTraceData.resourceAttributes:type_name -> proto.KeyValue
	12, // 8: proto.LogTraceData.spanAttributes:type_name -> proto.KeyValue
	12, // 9: proto.LogTraceData.eventAttributes:type_name -> proto.KeyValue
	8,  // 10: proto.LogTraceData.spanEvents:type_name -> proto.SpanEvent
	12, // 11: proto.SpanEvent.spanEventAttributes:type_name -> proto.KeyValue
	10, // 12: proto.AnyValue.array_value:type_name -> proto.ArrayValue
	11, // 13: proto.AnyValue.kvlist_value:type_name -> proto.KeyValueList
	9,  // 14: proto.ArrayValue.values:type_name -> proto.AnyValue
	12, // 15: proto.KeyValueList.values:type_name -> proto.KeyValue
	9,  // 16: proto.KeyValue.value:type_name -> proto.AnyValue
	2,  // 17: proto.TraceProxyService.ExportTraceProxy:input_type -> proto.ExportTraceProxyServiceRequest
	3,  // 18: proto.TraceProxyService.ExportLogTraceProxy:input_type -> proto.ExportLogTraceProxyServiceRequest
	0,  // 19: proto.TraceProxyService.Status:input_type -> proto.StatusRequest
	13, // 20: proto.TraceProxyService.ExportTraceProxy:output_type -> proto.ExportTraceProxyServiceResponse
	13, // 21: proto.TraceProxyService.ExportLogTraceProxy:output_type -> proto.ExportTraceProxyServiceResponse
	1,  // 22: proto.TraceProxyService.Status:output_type -> proto.StatusResponse
	20, // [20:23] is the sub-list for method output_type
	17, // [17:20] is the sub-list for method input_type
	17, // [17:17] is the sub-list for extension type_name
	17, // [17:17] is the sub-list for extension extendee
	0,  // [0:17] is the sub-list for field type_name
}

func init() { file_proto_proxyspan_proto_init() }
func file_proto_proxyspan_proto_init() {
	if File_proto_proxyspan_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_proxyspan_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proxyspan_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proxyspan_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportTraceProxyServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proxyspan_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportLogTraceProxyServiceRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proxyspan_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxySpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proxyspan_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProxyLogSpan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proxyspan_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proxyspan_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LogTraceData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proxyspan_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SpanEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proxyspan_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AnyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proxyspan_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proxyspan_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValueList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proxyspan_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_proxyspan_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExportTraceProxyServiceResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_proto_proxyspan_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*AnyValue_StringValue)(nil),
		(*AnyValue_BoolValue)(nil),
		(*AnyValue_IntValue)(nil),
		(*AnyValue_DoubleValue)(nil),
		(*AnyValue_ArrayValue)(nil),
		(*AnyValue_KvlistValue)(nil),
		(*AnyValue_BytesValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_proxyspan_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_proxyspan_proto_goTypes,
		DependencyIndexes: file_proto_proxyspan_proto_depIdxs,
		MessageInfos:      file_proto_proxyspan_proto_msgTypes,
	}.Build()
	File_proto_proxyspan_proto = out.File
	file_proto_proxyspan_proto_rawDesc = nil
	file_proto_proxyspan_proto_goTypes = nil
	file_proto_proxyspan_proto_depIdxs = nil
}
